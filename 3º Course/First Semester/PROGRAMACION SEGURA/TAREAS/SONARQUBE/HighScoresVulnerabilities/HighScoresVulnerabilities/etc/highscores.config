############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes. These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will
# only show messages at the INFO and above levels.
#handlers = java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler
#handlers = java.util.logging.FileHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level.
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level = INFO
#a partir de que nivel registramos. Solo registramos mensajes nivel info o superior

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
#java.util.logging.FileHandler.pattern = %h/java%u.log
java.util.logging.FileHandler.pattern = ./log/highscores%u.log
java.util.logging.FileHandler.level = WARNING
#java.util.logging.FileHandler.limit = 5 #limit y count da igual
#java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# Limit the message that are printed on the console to INFO and above.
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
#java.util.logging.ConsoleHandler.formatter = java.util.logging.XMLFormatter

# Example to customize the SimpleFormatter output format 
# to print one-line log message like this:
#     <level>: <log message> [<date/time>]
#
java.util.logging.SimpleFormatter.format = %1$tc %2$s %n %4$s: %5$s %6$s %n
#Formato mensajes
#[%1$tc] -> momento temporal
#%5$s -> registro
#%4$s-> mensaje

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# For example, set the B class logger to only log SEVERE messages:
#loggerexample.B.handlers = java.util.logging.ConsoleHandler
#loggerexample.B.level = WARNING
